{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["btnClasses","styles","button","FeedbackOptions","options","onLeaveFeedback","map","option","className","join","type","onClick","btnText","Statistics","good","neutral","bad","total","positivePercentage","statList","statItem","Section","title","children","Notification","message","App","state","handleClick","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","trunc","Object","keys","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"gRAGMA,EAAa,CAACC,IAAOC,QAiBZC,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,UAAWR,EAAWS,KAAK,KAE3BC,KAAK,SACLC,QAASN,EAAgBE,GAJ3B,SAME,sBAAMC,UAAWP,IAAOW,QAAxB,SAAkCL,KAJ7BA,S,gBCQEM,EAdI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,mCACE,qBAAIV,UAAWP,IAAOkB,SAAtB,UACE,qBAAIX,UAAWP,IAAOmB,SAAtB,mBAAuCN,KACvC,qBAAIN,UAAWP,IAAOmB,SAAtB,sBAA0CL,KAC1C,qBAAIP,UAAWP,IAAOmB,SAAtB,kBAAsCJ,EAAtC,OACA,qBAAIR,UAAWP,IAAOmB,SAAtB,oBAAwCH,KACxC,qBAAIT,UAAWP,IAAOmB,SAAtB,gCACsBF,EADtB,cCFSG,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MCDUC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KC8D5BC,E,4MAtDbC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPY,YAAc,SAACrB,GAAD,OAAY,WACxB,EAAKsB,UAAS,SAACC,GAAD,sBAAmBvB,EAASuB,EAAUvB,GAAU,Q,EAGhEwB,mBAAqB,WACnB,OAAO,EAAKJ,MAAMb,KAAO,EAAKa,MAAMZ,QAAU,EAAKY,MAAMX,K,EAG3DgB,gCAAkC,WAChC,OAAOC,KAAKC,MACS,IAAlB,EAAKP,MAAMb,MACT,EAAKa,MAAMb,KAAO,EAAKa,MAAMZ,QAAU,EAAKY,MAAMX,O,4CAIzD,WACE,IAAMT,EAAS4B,OAAOC,KAAKC,KAAKV,OAChC,EAA+BU,KAAKV,MAA5Bb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQoB,KAAKN,qBACbb,EAAqBmB,KAAKL,kCAEhC,OACE,qCACE,cAAC,EAAD,CAASV,MAAO,wBAAhB,SACE,cAAC,EAAD,CACElB,QAASG,EACTF,gBAAiBgC,KAAKT,gBAIf,IAAVX,EACC,cAAC,EAAD,CAAcQ,QAAS,sBAEvB,cAAC,EAAD,CAASH,MAAO,aAAhB,SACE,cAAC,EAAD,CACER,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA9ChBoB,IAAMC,WCGTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,SAAW,6BAA6B,SAAW,+B,kBCArED,EAAOC,QAAU,CAAC,OAAS,gCAAgC,QAAU,oC","file":"static/js/main.9b33e2d5.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"../FeedbackOptions/FeedbackOptions.module.css\";\n\nconst btnClasses = [styles.button];\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map((option) => (\n      <button\n        className={btnClasses.join(\" \")}\n        key={option}\n        type=\"button\"\n        onClick={onLeaveFeedback(option)}\n      >\n        <span className={styles.btnText}>{option}</span>\n      </button>\n    ))}\n  </>\n);\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Statistics.module.css\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <ul className={styles.statList}>\n      <li className={styles.statItem}>Good: {good}</li>\n      <li className={styles.statItem}>Neutral: {neutral}</li>\n      <li className={styles.statItem}>Bad: {bad} </li>\n      <li className={styles.statItem}>Total: {total}</li>\n      <li className={styles.statItem}>\n        Positive feedback: {positivePercentage} %\n      </li>\n    </ul>\n  </>\n);\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React from \"react\";\n\nconst Section = ({ title, children }) => (\n  <div>\n    <h3>{title}</h3>\n    {children}\n  </div>\n);\n\nexport default Section;\n","import React from \"react\";\n\nconst Notification = ({ message }) => <h2>{message}</h2>;\n\nexport default Notification;\n","// import logo from './logo.svg';\n// import './App.css';\n\nimport React from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleClick = (option) => () => {\n    this.setState((prevState) => ({ [option]: prevState[option] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.trunc(\n      (this.state.good * 100) /\n        (this.state.good + this.state.neutral + this.state.bad)\n    );\n  };\n\n  render() {\n    const option = Object.keys(this.state);\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            options={option}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n\n        {total === 0 ? (\n          <Notification message={\"No feedback given\"} />\n        ) : (\n          <Section title={\"Statistics\"}>\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          </Section>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statList\":\"Statistics_statList__1vrWs\",\"statItem\":\"Statistics_statItem__2sjFp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3q-1M\",\"btnText\":\"FeedbackOptions_btnText__2L-eb\"};"],"sourceRoot":""}